import { parse } from 'path';
import { GraphbackCoreMetadata, GraphbackPlugin } from '@graphback/core'
import { writeDocumentsToFilesystem } from './helpers/writeDocuments';
import { createClientDocumentsGQL, createClientDocumentsTS } from './templates'
import { ClientTemplates } from './templates/ClientTemplates'

/**
 * Configuration for client generator
 */
export interface ClientGeneratorPluginConfig {
  /**
   * Generate only fragments and skip query, mutation and subscription elements
   * This can be particulairly usefull when many custom complex queries are needed
   * but they still base on autogenerated fragments
   */
  fragmentOnly?: boolean

  /**
   * RelativePath for the output file created by generator
   */
  outputFile: string
}

export const CLIENT_CRUD_PLUGIN = "ClientCRUDPlugin";

/**
 * Graphback CRUD operations plugin
 *
 * Plugins generates client side documents containing CRUD operations:
 * Queries, Mutations and Subscriptions that reference coresponding schema and resolves.
 * Plugin operates on all types annotated with model
 *
 * Used graphql metadata:
 *
 * - model: marks type to be processed by CRUD generator
 * - crud: controls what types of operations can be generated.
 * For example crud.update: false will disable updates for type
 */
export class ClientCRUDPlugin extends GraphbackPlugin {
  private pluginConfig: ClientGeneratorPluginConfig;

  public constructor(pluginConfig?: ClientGeneratorPluginConfig) {
    super()
    this.pluginConfig = pluginConfig;
    if (!pluginConfig.outputFile) {
      throw new Error("client plugin requires outputFile parameter")
    }
  }

  public createResources(metadata: GraphbackCoreMetadata): void {
    const documents = this.getDocuments(metadata)

    writeDocumentsToFilesystem(this.pluginConfig.outputFile, documents);
  }

  public getPluginName(): string {
    return CLIENT_CRUD_PLUGIN;
  }

  public getDocuments(metadata: GraphbackCoreMetadata) {
    const models = metadata.getModelDefinitions();
    if (models.length === 0) {
      this.logWarning("Provided schema has no models. No client side queries will be generated")
    }

    let documents: ClientTemplates;

    // Extract the file extension from the plugin config
    const outputFileAsPath = parse(this.pluginConfig.outputFile);
    const documentExtension = outputFileAsPath.ext;
    const supportedFileExtensions = ['.ts', '.graphql'];

    if (!supportedFileExtensions.includes(documentExtension)) {
      throw new Error(`ClientCRUD plugin outputFile requires a file extension of either: ${supportedFileExtensions.join(', ')}`)
    }

    if (documentExtension === '.ts') {
      documents = createClientDocumentsTS(models);
    }
    else if (documentExtension === '.graphql') {
      documents = createClientDocumentsGQL(models);
    } else {
      throw new Error("Invalid output format for client plugin");
    }

    if (this.pluginConfig.fragmentOnly) {
      documents = {
        fragments: documents.fragments,
        queries: [],
        mutations: [],
        subscriptions: [],
      };
    }

    return documents;
  }
}
