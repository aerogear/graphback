import { GraphbackPubSubModel, GraphbackDataProvider, CRUDService } from '@graphback/runtime'
import { GraphQLSchema, GraphQLObjectType } from 'graphql'
import { PubSubEngine } from 'graphql-subscriptions'
import { CrudServicesAuthConfig } from './definitions'
import { KeycloakCrudService } from './KeycloakCrudService'


/**
 * options for createKeycloakRuntimeContext helper function
 */
export interface KeycloakRuntimeContextOptions<Provider extends GraphbackDataProvider, Service extends CRUDService> {
  /**
   * the model objects generated by graphback
   */
  models: GraphbackPubSubModel[]
  /**
   * database client that will be passed into the dataProvider
   */
  db: any
  /**
   * the GraphQL Schema
   */
  schema: GraphQLSchema
  /**
   * pubsub
   */
  pubSub: PubSubEngine
  /**
   * The auth rules for each model
   */
  authConfig: CrudServicesAuthConfig
  /**
   * The constructor for the dataprovider created for each model, example: KnexDataProvider
   */
  dataProvider: new (...args: any[]) => Provider
  /**
   * constructor for the crud service that will be created for each model
   * use this to override the default KeycloakCrudService with your own.
   * for example, if you extend the KeycloakCrudService you could pass it here.
   */
  crudService?: new (...args: any[]) => Service
}

/**
 * Helper function for creating Keycloak runtime context used in Graphback
 */
export function createKeycloakRuntimeContext<Provider extends GraphbackDataProvider, Service extends CRUDService>
({ models, db, schema, pubSub, dataProvider, crudService, authConfig }: KeycloakRuntimeContextOptions<Provider, Service>) {
  if (!models || models.length === 0) {
    throw new Error(`No models provided`)
  }

  return models.reduce((services: any, model: GraphbackPubSubModel) => {
    const modelType = schema.getType(model.name) as GraphQLObjectType
    if (modelType === undefined) {
      throw new Error(`
      Schema is missing provided type. 
      Please make sure that you pass the right schema to createCRUDRuntimeContext`)
    }

    const objectDB = new dataProvider(modelType, db)

    // default to the KeycloakCrudService class but allow user to provide their own class
    // useful in cases where they extend the class.
    // example: datasync-starter extends the CrudService class to change some pubsub behaviour
    const service = crudService || KeycloakCrudService

    services[model.name] = new service({
      modelType,
      db: objectDB,
      subscriptionConfig: {
        pubSub,
        ...model.pubSub
      },
      authConfig: authConfig[model.name]
    })

    return services;
  }, {})

}