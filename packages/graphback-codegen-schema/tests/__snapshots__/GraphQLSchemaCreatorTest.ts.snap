// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test snapshot config gql 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: [CommentFilterInput]
}

input CommentFilterUniqueInput {
  id: ID!
}

input CommentInput {
  id: ID
  title: String
  description: String
}

type CommentListResult {
  items: [Comment]!
  nextCursor: String
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: NoteInput!): Note!
  updateNote(input: NoteInput!): Note!
  deleteNote(input: NoteFilterUniqueInput!): Note!
  createComment(input: CommentInput!): Comment!
  updateComment(input: CommentInput!): Comment!
  deleteComment(input: CommentFilterUniqueInput!): Comment!
  createTest(input: TestInput!): Test!
  updateTest(input: TestInput!): Test!
  deleteTest(input: TestFilterUniqueInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String! @test(description: \\"mock directive\\")
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: [NoteFilterInput]
}

input NoteFilterUniqueInput {
  id: ID!
}

input NoteInput {
  id: ID
  title: String
  description: String
}

type NoteListResult {
  items: [Note]!
  nextCursor: String
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(filter: NoteFilterUniqueInput!): Note
  findNotes(filter: NoteFilterInput, limit: Int, offset: Int): NoteListResult!
  findAllNotes(filter: NoteFilterInput, limit: Int, offset: Int): [Note!]
  getComment(filter: CommentFilterUniqueInput!): Comment
  findComments(filter: CommentFilterInput, limit: Int, offset: Int): CommentListResult!
  findAllComments(filter: CommentFilterInput, limit: Int, offset: Int): [Comment!]
  getTest(filter: TestFilterUniqueInput!): Test
  findTests(filter: TestFilterInput, limit: Int, offset: Int): TestListResult!
  findAllTests(filter: TestFilterInput, limit: Int, offset: Int): [Test!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: [TestFilterInput]
}

input TestFilterUniqueInput {
  id: ID!
}

input TestInput {
  id: ID
  name: String
}

type TestListResult {
  items: [Test]!
  nextCursor: String
}"
`;

exports[`Test snapshot config js 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: [CommentFilterInput]
}

input CommentFilterUniqueInput {
  id: ID!
}

input CommentInput {
  id: ID
  title: String
  description: String
}

type CommentListResult {
  items: [Comment]!
  nextCursor: String
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: NoteInput!): Note!
  updateNote(input: NoteInput!): Note!
  deleteNote(input: NoteFilterUniqueInput!): Note!
  createComment(input: CommentInput!): Comment!
  updateComment(input: CommentInput!): Comment!
  deleteComment(input: CommentFilterUniqueInput!): Comment!
  createTest(input: TestInput!): Test!
  updateTest(input: TestInput!): Test!
  deleteTest(input: TestFilterUniqueInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: [NoteFilterInput]
}

input NoteFilterUniqueInput {
  id: ID!
}

input NoteInput {
  id: ID
  title: String
  description: String
}

type NoteListResult {
  items: [Note]!
  nextCursor: String
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(filter: NoteFilterUniqueInput!): Note
  findNotes(filter: NoteFilterInput, limit: Int, offset: Int): NoteListResult!
  findAllNotes(filter: NoteFilterInput, limit: Int, offset: Int): [Note!]
  getComment(filter: CommentFilterUniqueInput!): Comment
  findComments(filter: CommentFilterInput, limit: Int, offset: Int): CommentListResult!
  findAllComments(filter: CommentFilterInput, limit: Int, offset: Int): [Comment!]
  getTest(filter: TestFilterUniqueInput!): Test
  findTests(filter: TestFilterInput, limit: Int, offset: Int): TestListResult!
  findAllTests(filter: TestFilterInput, limit: Int, offset: Int): [Test!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: [TestFilterInput]
}

input TestFilterUniqueInput {
  id: ID!
}

input TestInput {
  id: ID
  name: String
}

type TestListResult {
  items: [Test]!
  nextCursor: String
}
"
`;

exports[`Test snapshot config ts 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: [CommentFilterInput]
}

input CommentFilterUniqueInput {
  id: ID!
}

input CommentInput {
  id: ID
  title: String
  description: String
}

type CommentListResult {
  items: [Comment]!
  nextCursor: String
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: NoteInput!): Note!
  updateNote(input: NoteInput!): Note!
  deleteNote(input: NoteFilterUniqueInput!): Note!
  createComment(input: CommentInput!): Comment!
  updateComment(input: CommentInput!): Comment!
  deleteComment(input: CommentFilterUniqueInput!): Comment!
  createTest(input: TestInput!): Test!
  updateTest(input: TestInput!): Test!
  deleteTest(input: TestFilterUniqueInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: [NoteFilterInput]
}

input NoteFilterUniqueInput {
  id: ID!
}

input NoteInput {
  id: ID
  title: String
  description: String
}

type NoteListResult {
  items: [Note]!
  nextCursor: String
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(filter: NoteFilterUniqueInput!): Note
  findNotes(filter: NoteFilterInput, limit: Int, offset: Int): NoteListResult!
  findAllNotes(filter: NoteFilterInput, limit: Int, offset: Int): [Note!]
  getComment(filter: CommentFilterUniqueInput!): Comment
  findComments(filter: CommentFilterInput, limit: Int, offset: Int): CommentListResult!
  findAllComments(filter: CommentFilterInput, limit: Int, offset: Int): [Comment!]
  getTest(filter: TestFilterUniqueInput!): Test
  findTests(filter: TestFilterInput, limit: Int, offset: Int): TestListResult!
  findAllTests(filter: TestFilterInput, limit: Int, offset: Int): [Test!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: [TestFilterInput]
}

input TestFilterUniqueInput {
  id: ID!
}

input TestInput {
  id: ID
  name: String
}

type TestListResult {
  items: [Test]!
  nextCursor: String
}
"
`;
