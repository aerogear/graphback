// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Creates CRUD resolvers for models 1`] = `
Object {
  "Comment": Object {
    "noteComment": [Function],
  },
  "Fix": Object {
    "issues": [Function],
  },
  "GraphbackDate": "GraphbackDate",
  "GraphbackJSON": "GraphbackJSON",
  "Issue": Object {
    "bugFix": [Function],
  },
  "Mutation": Object {
    "createComment": [Function],
    "createFix": [Function],
    "createIssue": [Function],
    "createNote": [Function],
    "createTest": [Function],
    "deleteComment": [Function],
    "deleteNote": [Function],
    "deleteTest": [Function],
    "updateComment": [Function],
    "updateNote": [Function],
    "updateTest": [Function],
  },
  "Note": Object {
    "comments": [Function],
    "test": [Function],
  },
  "Query": Object {
    "findComments": [Function],
    "findNotes": [Function],
    "findTests": [Function],
    "getComment": [Function],
    "getNote": [Function],
    "getTest": [Function],
  },
  "Subscription": Object {
    "deletedComment": Object {
      "subscribe": [Function],
    },
    "deletedNote": Object {
      "subscribe": [Function],
    },
    "deletedTest": Object {
      "subscribe": [Function],
    },
    "newComment": Object {
      "subscribe": [Function],
    },
    "newNote": Object {
      "subscribe": [Function],
    },
    "newTest": Object {
      "subscribe": [Function],
    },
    "updatedComment": Object {
      "subscribe": [Function],
    },
    "updatedNote": Object {
      "subscribe": [Function],
    },
    "updatedTest": Object {
      "subscribe": [Function],
    },
  },
}
`;

exports[`Test one side relationship schema query type generation 1`] = `
"type Query {
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilter, page: PageRequest, orderBy: OrderByInput): TestResultList!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany(field: 'note', key: 'test_id')\\"\\"\\"
  tests(filter: TestFilter): [Test]!
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String

  \\"\\"\\"@manyToOne(field: 'tests', key: 'test_id')\\"\\"\\"
  note: Note
}

input TestFilter {
  id: IDInput
  name: StringInput
  test_id: IDInput
  and: [TestFilter!]
  or: [TestFilter!]
  not: TestFilter
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

input PageRequest {
  limit: Int
  offset: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  count: Int
}
"
`;

exports[`Test snapshot config gql 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\"Exposes a URL that specifies the behaviour of this scalar.\\"\\"\\"
directive @specifiedBy(
  \\"\\"\\"The URL that specifies the behaviour of this scalar.\\"\\"\\"
  url: String!
) on SCALAR

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  createdAt: GraphbackDate
  title: String!
  description: String!

  \\"\\"\\"@manyToOne(field: 'comments', key: 'note_id')\\"\\"\\"
  noteComment: Note!
}

input CommentFilter {
  id: IDInput
  createdAt: GraphbackDateInput
  title: StringInput
  description: StringInput
  note_id: IDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  id: ID
  createdAt: GraphbackDate
  title: String
  description: String
}

input CreateCommentInput {
  id: ID
  createdAt: GraphbackDate
  title: String!
  description: String!
  note_id: ID!
}

input CreateCustomTypeInput {
  issue1432: String
}

input CreateFixInput {
  id: ID
}

input CreateIssueInput {
  id: ID
  category: IssueCategory
  createdAt: DateTime
  custom: CreateCustomTypeInput
  bugFixId: ID
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
  test_id: ID
}

input CreateTestInput {
  id: ID
  name: String
  metadata: GraphbackJSON
}

type CustomType {
  issue1432: String
}

scalar DateTime

input DateTimeInput {
  ne: DateTime
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime!]
  between: [DateTime!]
}

\\"\\"\\"
A model added as part of fixing https://github.com/aerogear/graphback/issues/1452, disable some crud operations to decreate noises.
@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Fix {
  id: ID!

  \\"\\"\\"
  Added as part of fixing https://github.com/aerogear/graphback/issues/1452 showing that even if filtering is disabled on a model level,
  we should have filter type created as it can be used on the relationship level without throwing an error.
  @oneToMany(field: 'bugFix', key: 'bugFixId')
  \\"\\"\\"
  issues(filter: IssueFilter): [Issue]
}

scalar GraphbackDate

input GraphbackDateInput {
  ne: GraphbackDate
  eq: GraphbackDate
  le: GraphbackDate
  lt: GraphbackDate
  ge: GraphbackDate
  gt: GraphbackDate
  in: [GraphbackDate!]
  between: [GraphbackDate!]
}

scalar GraphbackJSON

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

\\"\\"\\"
Model added to test schema generation using enum.
See issue https://github.com/aerogear/graphback/issues/1299

@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Issue {
  id: ID!
  category: IssueCategory
  createdAt: DateTime

  \\"\\"\\"
  Field with custom type added as a fix for https://github.com/aerogear/graphback/issues/1432
  This shows that a custom type can be added without breaking Graphback schema generation
  \\"\\"\\"
  custom: CustomType

  \\"\\"\\"@manyToOne(field: 'issues', key: 'bugFixId')\\"\\"\\"
  bugFix: Fix
}

enum IssueCategory {
  BUG
  QUESTION
  FEATURE_REQUEST
}

input IssueFilter {
  id: IDInput
  category: StringInput
  createdAt: DateTimeInput
  bugFixId: IDInput
  and: [IssueFilter!]
  or: [IssueFilter!]
  not: IssueFilter
}

input MutateCommentInput {
  id: ID!
  createdAt: GraphbackDate
  title: String
  description: String
  note_id: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
  test_id: ID
}

input MutateTestInput {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createTest(input: CreateTestInput!): Test
  updateTest(input: MutateTestInput!): Test
  deleteTest(input: MutateTestInput!): Test
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
  createIssue(input: CreateIssueInput!): Issue
  createFix(input: CreateFixInput!): Fix
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String! @test(description: \\"mock directive\\")
  description: String!

  \\"\\"\\"@oneToMany(field: 'noteComment', key: 'note_id')\\"\\"\\"
  comments(filter: CommentFilter): [Comment]!

  \\"\\"\\"@oneToOne(key: 'test_id')\\"\\"\\"
  test: Test
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  test_id: IDInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilter, page: PageRequest, orderBy: OrderByInput): TestResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newTest(filter: TestSubscriptionFilter): Test!
  updatedTest(filter: TestSubscriptionFilter): Test!
  deletedTest(filter: TestSubscriptionFilter): Test!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

input TestFilter {
  id: IDInput
  name: StringInput
  and: [TestFilter!]
  or: [TestFilter!]
  not: TestFilter
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  count: Int
}

input TestSubscriptionFilter {
  id: ID
  name: String
}"
`;

exports[`Test snapshot config js 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilter, page: PageRequest, orderBy: OrderByInput): TestResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany(field: 'noteComment', key: 'note_id')\\"\\"\\"
  comments(filter: CommentFilter): [Comment]!

  \\"\\"\\"@oneToOne(key: 'test_id')\\"\\"\\"
  test: Test
}

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  createdAt: GraphbackDate
  title: String!
  description: String!

  \\"\\"\\"@manyToOne(field: 'comments', key: 'note_id')\\"\\"\\"
  noteComment: Note!
}

scalar GraphbackDate

input CommentFilter {
  id: IDInput
  createdAt: GraphbackDateInput
  title: StringInput
  description: StringInput
  note_id: IDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input GraphbackDateInput {
  ne: GraphbackDate
  eq: GraphbackDate
  le: GraphbackDate
  lt: GraphbackDate
  ge: GraphbackDate
  gt: GraphbackDate
  in: [GraphbackDate!]
  between: [GraphbackDate!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

scalar GraphbackJSON

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  test_id: IDInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

input PageRequest {
  limit: Int
  offset: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  count: Int
}

input TestFilter {
  id: IDInput
  name: StringInput
  and: [TestFilter!]
  or: [TestFilter!]
  not: TestFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createTest(input: CreateTestInput!): Test
  updateTest(input: MutateTestInput!): Test
  deleteTest(input: MutateTestInput!): Test
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
  createIssue(input: CreateIssueInput!): Issue
  createFix(input: CreateFixInput!): Fix
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
  test_id: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
  test_id: ID
}

input CreateTestInput {
  id: ID
  name: String
  metadata: GraphbackJSON
}

input MutateTestInput {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

input CreateCommentInput {
  id: ID
  createdAt: GraphbackDate
  title: String!
  description: String!
  note_id: ID!
}

input MutateCommentInput {
  id: ID!
  createdAt: GraphbackDate
  title: String
  description: String
  note_id: ID
}

\\"\\"\\"
Model added to test schema generation using enum.
See issue https://github.com/aerogear/graphback/issues/1299

@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Issue {
  id: ID!
  category: IssueCategory
  createdAt: DateTime

  \\"\\"\\"
  Field with custom type added as a fix for https://github.com/aerogear/graphback/issues/1432
  This shows that a custom type can be added without breaking Graphback schema generation
  \\"\\"\\"
  custom: CustomType

  \\"\\"\\"@manyToOne(field: 'issues', key: 'bugFixId')\\"\\"\\"
  bugFix: Fix
}

enum IssueCategory {
  BUG
  QUESTION
  FEATURE_REQUEST
}

scalar DateTime

type CustomType {
  issue1432: String
}

\\"\\"\\"
A model added as part of fixing https://github.com/aerogear/graphback/issues/1452, disable some crud operations to decreate noises.
@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Fix {
  id: ID!

  \\"\\"\\"
  Added as part of fixing https://github.com/aerogear/graphback/issues/1452 showing that even if filtering is disabled on a model level,
  we should have filter type created as it can be used on the relationship level without throwing an error.
  @oneToMany(field: 'bugFix', key: 'bugFixId')
  \\"\\"\\"
  issues(filter: IssueFilter): [Issue]
}

input IssueFilter {
  id: IDInput
  category: StringInput
  createdAt: DateTimeInput
  bugFixId: IDInput
  and: [IssueFilter!]
  or: [IssueFilter!]
  not: IssueFilter
}

input DateTimeInput {
  ne: DateTime
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime!]
  between: [DateTime!]
}

input CreateIssueInput {
  id: ID
  category: IssueCategory
  createdAt: DateTime
  custom: CreateCustomTypeInput
  bugFixId: ID
}

input CreateCustomTypeInput {
  issue1432: String
}

input CreateFixInput {
  id: ID
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newTest(filter: TestSubscriptionFilter): Test!
  updatedTest(filter: TestSubscriptionFilter): Test!
  deletedTest(filter: TestSubscriptionFilter): Test!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

input NoteSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input TestSubscriptionFilter {
  id: ID
  name: String
}

input CommentSubscriptionFilter {
  id: ID
  createdAt: GraphbackDate
  title: String
  description: String
}
"
`;

exports[`Test snapshot config ts 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilter, page: PageRequest, orderBy: OrderByInput): TestResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany(field: 'noteComment', key: 'note_id')\\"\\"\\"
  comments(filter: CommentFilter): [Comment]!

  \\"\\"\\"@oneToOne(key: 'test_id')\\"\\"\\"
  test: Test
}

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  createdAt: GraphbackDate
  title: String!
  description: String!

  \\"\\"\\"@manyToOne(field: 'comments', key: 'note_id')\\"\\"\\"
  noteComment: Note!
}

scalar GraphbackDate

input CommentFilter {
  id: IDInput
  createdAt: GraphbackDateInput
  title: StringInput
  description: StringInput
  note_id: IDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input GraphbackDateInput {
  ne: GraphbackDate
  eq: GraphbackDate
  le: GraphbackDate
  lt: GraphbackDate
  ge: GraphbackDate
  gt: GraphbackDate
  in: [GraphbackDate!]
  between: [GraphbackDate!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

scalar GraphbackJSON

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  test_id: IDInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

input PageRequest {
  limit: Int
  offset: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  count: Int
}

input TestFilter {
  id: IDInput
  name: StringInput
  and: [TestFilter!]
  or: [TestFilter!]
  not: TestFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createTest(input: CreateTestInput!): Test
  updateTest(input: MutateTestInput!): Test
  deleteTest(input: MutateTestInput!): Test
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
  createIssue(input: CreateIssueInput!): Issue
  createFix(input: CreateFixInput!): Fix
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
  test_id: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
  test_id: ID
}

input CreateTestInput {
  id: ID
  name: String
  metadata: GraphbackJSON
}

input MutateTestInput {
  id: ID!
  name: String
  metadata: GraphbackJSON
}

input CreateCommentInput {
  id: ID
  createdAt: GraphbackDate
  title: String!
  description: String!
  note_id: ID!
}

input MutateCommentInput {
  id: ID!
  createdAt: GraphbackDate
  title: String
  description: String
  note_id: ID
}

\\"\\"\\"
Model added to test schema generation using enum.
See issue https://github.com/aerogear/graphback/issues/1299

@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Issue {
  id: ID!
  category: IssueCategory
  createdAt: DateTime

  \\"\\"\\"
  Field with custom type added as a fix for https://github.com/aerogear/graphback/issues/1432
  This shows that a custom type can be added without breaking Graphback schema generation
  \\"\\"\\"
  custom: CustomType

  \\"\\"\\"@manyToOne(field: 'issues', key: 'bugFixId')\\"\\"\\"
  bugFix: Fix
}

enum IssueCategory {
  BUG
  QUESTION
  FEATURE_REQUEST
}

scalar DateTime

type CustomType {
  issue1432: String
}

\\"\\"\\"
A model added as part of fixing https://github.com/aerogear/graphback/issues/1452, disable some crud operations to decreate noises.
@model(
  find: false,
  findOne: false,
  create: true,
  update: false,
  delete: false,
  subCreate: false,
  subUpdate: false,
  subDelete: false
)
\\"\\"\\"
type Fix {
  id: ID!

  \\"\\"\\"
  Added as part of fixing https://github.com/aerogear/graphback/issues/1452 showing that even if filtering is disabled on a model level,
  we should have filter type created as it can be used on the relationship level without throwing an error.
  @oneToMany(field: 'bugFix', key: 'bugFixId')
  \\"\\"\\"
  issues(filter: IssueFilter): [Issue]
}

input IssueFilter {
  id: IDInput
  category: StringInput
  createdAt: DateTimeInput
  bugFixId: IDInput
  and: [IssueFilter!]
  or: [IssueFilter!]
  not: IssueFilter
}

input DateTimeInput {
  ne: DateTime
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime!]
  between: [DateTime!]
}

input CreateIssueInput {
  id: ID
  category: IssueCategory
  createdAt: DateTime
  custom: CreateCustomTypeInput
  bugFixId: ID
}

input CreateCustomTypeInput {
  issue1432: String
}

input CreateFixInput {
  id: ID
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newTest(filter: TestSubscriptionFilter): Test!
  updatedTest(filter: TestSubscriptionFilter): Test!
  deletedTest(filter: TestSubscriptionFilter): Test!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

input NoteSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input TestSubscriptionFilter {
  id: ID
  name: String
}

input CommentSubscriptionFilter {
  id: ID
  createdAt: GraphbackDate
  title: String
  description: String
}
"
`;

exports[`field directives on relationship fields are mapped to schema 1`] = `
"directive @test on FIELD_DEFINITION

\\"\\"\\"Exposes a URL that specifies the behaviour of this scalar.\\"\\"\\"
directive @specifiedBy(
  \\"\\"\\"The URL that specifies the behaviour of this scalar.\\"\\"\\"
  url: String!
) on SCALAR

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  text: String
  description: String

  \\"\\"\\"@manyToOne(field: 'comments', key: 'noteId')\\"\\"\\"
  note: Note! @test
}

input CommentFilter {
  id: IDInput
  text: StringInput
  description: StringInput
  noteId: IDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  id: ID
  text: String
  description: String
}

input CreateCommentInput {
  id: ID
  text: String
  description: String
  noteId: ID!
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String
  commentId: ID
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutateCommentInput {
  id: ID!
  text: String
  description: String
  noteId: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
  commentId: ID
}

type Mutation {
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String

  \\"\\"\\"@oneToMany(field: 'note', key: 'noteId')\\"\\"\\"
  comments(filter: CommentFilter): [Comment]! @test

  \\"\\"\\"@oneToOne(key: 'commentId')\\"\\"\\"
  comment: Comment @test
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  commentId: IDInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}"
`;
