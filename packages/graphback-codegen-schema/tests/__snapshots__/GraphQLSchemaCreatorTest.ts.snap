// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test one side relationship schema query type generation 1`] = `
"input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany field: 'note', key: 'test_id'\\"\\"\\"
  tests(filter: TestFilterInput): [Test]!
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: NoteFilterInput
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  total: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

type Query {
  getNote(id: ID!): Note
  findNotes(filter: NoteFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): NoteResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): TestResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String

  \\"\\"\\"@manyToOne field: 'tests', key: 'test_id'\\"\\"\\"
  note: Note
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: TestFilterInput
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  total: Int
}
"
`;

exports[`Test snapshot config gql 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: CommentFilterInput
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  total: Int
}

input CreateCommentInput {
  id: ID
  title: String!
  description: String!
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
}

input CreateTestInput {
  id: ID
  name: String
}

input DeleteCommentInput {
  id: ID!
}

input DeleteNoteInput {
  id: ID!
}

input DeleteTestInput {
  id: ID!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note!
  updateNote(input: UpdateNoteInput!): Note!
  deleteNote(input: DeleteNoteInput!): Note!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(input: DeleteCommentInput!): Comment!
  createTest(input: CreateTestInput!): Test!
  updateTest(input: UpdateTestInput!): Test!
  deleteTest(input: DeleteTestInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String! @test(description: \\"mock directive\\")
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: NoteFilterInput
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  total: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): CommentResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): TestResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(input: CreateNoteInput): Note!
  updatedNote(input: UpdateNoteInput): Note!
  deletedNote(input: DeleteNoteInput): Note!
  newComment(input: CreateCommentInput): Comment!
  updatedComment(input: UpdateCommentInput): Comment!
  deletedComment(input: DeleteCommentInput): Comment!
  newTest(input: CreateTestInput): Test!
  updatedTest(input: UpdateTestInput): Test!
  deletedTest(input: DeleteTestInput): Test!
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: TestFilterInput
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  total: Int
}

input UpdateCommentInput {
  id: ID!
  title: String
  description: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  description: String
}

input UpdateTestInput {
  id: ID!
  name: String
}"
`;

exports[`Test snapshot config js 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: CommentFilterInput
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  total: Int
}

input CreateCommentInput {
  id: ID
  title: String!
  description: String!
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
}

input CreateTestInput {
  id: ID
  name: String
}

input DeleteCommentInput {
  id: ID!
}

input DeleteNoteInput {
  id: ID!
}

input DeleteTestInput {
  id: ID!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note!
  updateNote(input: UpdateNoteInput!): Note!
  deleteNote(input: DeleteNoteInput!): Note!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(input: DeleteCommentInput!): Comment!
  createTest(input: CreateTestInput!): Test!
  updateTest(input: UpdateTestInput!): Test!
  deleteTest(input: DeleteTestInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: NoteFilterInput
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  total: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): CommentResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): TestResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(input: CreateNoteInput): Note!
  updatedNote(input: UpdateNoteInput): Note!
  deletedNote(input: DeleteNoteInput): Note!
  newComment(input: CreateCommentInput): Comment!
  updatedComment(input: UpdateCommentInput): Comment!
  deletedComment(input: DeleteCommentInput): Comment!
  newTest(input: CreateTestInput): Test!
  updatedTest(input: UpdateTestInput): Test!
  deletedTest(input: DeleteTestInput): Test!
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: TestFilterInput
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  total: Int
}

input UpdateCommentInput {
  id: ID!
  title: String
  description: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  description: String
}

input UpdateTestInput {
  id: ID!
  name: String
}
"
`;

exports[`Test snapshot config ts 1`] = `
"directive @test(description: String) on FIELD_DEFINITION | ENUM_VALUE

\\"\\"\\" @model \\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne field: 'comments', key: 'note_id'\\"\\"\\"
  noteComment: Note!
}

input CommentFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: CommentFilterInput
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  total: Int
}

input CreateCommentInput {
  id: ID
  title: String!
  description: String!
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
}

input CreateTestInput {
  id: ID
  name: String
}

input DeleteCommentInput {
  id: ID!
}

input DeleteNoteInput {
  id: ID!
}

input DeleteTestInput {
  id: ID!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note!
  updateNote(input: UpdateNoteInput!): Note!
  deleteNote(input: DeleteNoteInput!): Note!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(input: DeleteCommentInput!): Comment!
  createTest(input: CreateTestInput!): Test!
  updateTest(input: UpdateTestInput!): Test!
  deleteTest(input: DeleteTestInput!): Test!
}

\\"\\"\\" @model \\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany field: 'noteComment', key: 'note_id'\\"\\"\\"
  comments(filter: CommentFilterInput): [Comment]!

  \\"\\"\\"@oneToOne key: 'test_id'\\"\\"\\"
  test: Test
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: NoteFilterInput
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  total: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): CommentResultList!
  getTest(id: ID!): Test
  findTests(filter: TestFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): TestResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(input: CreateNoteInput): Note!
  updatedNote(input: UpdateNoteInput): Note!
  deletedNote(input: DeleteNoteInput): Note!
  newComment(input: CreateCommentInput): Comment!
  updatedComment(input: UpdateCommentInput): Comment!
  deletedComment(input: DeleteCommentInput): Comment!
  newTest(input: CreateTestInput): Test!
  updatedTest(input: UpdateTestInput): Test!
  deletedTest(input: DeleteTestInput): Test!
}

\\"\\"\\"@model\\"\\"\\"
type Test {
  id: ID!
  name: String
}

input TestFilterInput {
  id: IDInput
  name: StringInput
  and: [TestFilterInput]
  or: [TestFilterInput]
  not: TestFilterInput
}

type TestResultList {
  items: [Test]!
  offset: Int
  limit: Int
  total: Int
}

input UpdateCommentInput {
  id: ID!
  title: String
  description: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  description: String
}

input UpdateTestInput {
  id: ID!
  name: String
}
"
`;
