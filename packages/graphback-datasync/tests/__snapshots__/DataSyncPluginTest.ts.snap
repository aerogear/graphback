// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test snapshot config gql 1`] = `
"\\"\\"\\"
@model
@datasync
\\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@manyToOne(field: 'comments', key: 'noteId')\\"\\"\\"
  noteComment: Note!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
}

type CommentDelta {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
  _deleted: Boolean
}

type CommentDeltaList {
  items: [CommentDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input CommentFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  noteId: IDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input CreateCommentInput {
  id: ID
  title: String!
  description: String!
  noteId: ID!
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
}

\\"\\"\\"
The javascript \`Date\` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
\\"\\"\\"
scalar GraphbackTimestamp

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutateCommentInput {
  id: ID!
  title: String
  description: String
  noteId: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
}

type Mutation {
  likeNote(id: ID!): Note!
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

\\"\\"\\"
@model
@datasync
\\"\\"\\"
type Note {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@oneToMany(field: 'noteComment', key: 'noteId')\\"\\"\\"
  comments(filter: CommentFilter): [Comment]!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
}

type NoteDelta {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
  _deleted: Boolean
}

type NoteDeltaList {
  items: [NoteDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getLikedNotes(id: ID!, names: [String]!): Note!
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  syncNotes(lastSync: GraphbackTimestamp!, filter: NoteFilter, limit: Int): NoteDeltaList!
  syncComments(lastSync: GraphbackTimestamp!, filter: CommentFilter, limit: Int): CommentDeltaList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}
"
`;

exports[`uses existing GraphbackTimestamp scalars 1`] = `
"\\"\\"\\"
@model
@datasync
\\"\\"\\"
type Comment {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
}

type CommentDelta {
  id: ID!
  title: String!
  description: String!

  \\"\\"\\"@index(name: 'Datasync_lastUpdatedAt')\\"\\"\\"
  _lastUpdatedAt: GraphbackTimestamp
  _deleted: Boolean
}

type CommentDeltaList {
  items: [CommentDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input CommentFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  id: ID
  title: String
  description: String
}

input CreateCommentInput {
  id: ID
  title: String!
  description: String!
}

\\"\\"\\"
The javascript \`Date\` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
\\"\\"\\"
scalar GraphbackTimestamp

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutateCommentInput {
  id: ID!
  title: String
  description: String
}

type Mutation {
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  syncComments(lastSync: GraphbackTimestamp!, filter: CommentFilter, limit: Int): CommentDeltaList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}
"
`;
