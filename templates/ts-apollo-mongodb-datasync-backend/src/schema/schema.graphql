## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
@model
@datasync(
  ttl: 5184000
)
"""
type Comment {
  _id: GraphbackObjectID!
  text: String
  description: String

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Note

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
}

type CommentDelta {
  _id: GraphbackObjectID!
  text: String
  description: String

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
  _deleted: Boolean
}

type CommentDeltaList {
  items: [CommentDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input CommentFilter {
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
  noteId: GraphbackObjectIDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  and: [CommentSubscriptionFilter!]
  or: [CommentSubscriptionFilter!]
  not: CommentSubscriptionFilter
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
}

input CreateCommentInput {
  _id: GraphbackObjectID
  text: String
  description: String
  noteId: GraphbackObjectID
}

input CreateNoteInput {
  _id: GraphbackObjectID
  title: String!
  description: String
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar GraphbackTimestamp

input MutateCommentInput {
  _id: GraphbackObjectID!
  text: String
  description: String
  noteId: GraphbackObjectID
  _version: Int!
}

input MutateNoteInput {
  _id: GraphbackObjectID!
  title: String
  description: String
}

type Mutation {
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

"""
@model
@datasync(
  ttl: 5184000
)
"""
type Note {
  _id: GraphbackObjectID!
  title: String!
  description: String

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  comments(filter: CommentFilter): [Comment]!

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
}

type NoteDelta {
  _id: GraphbackObjectID!
  title: String!
  description: String

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _deleted: Boolean
}

type NoteDeltaList {
  items: [NoteDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input NoteFilter {
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  and: [NoteSubscriptionFilter!]
  or: [NoteSubscriptionFilter!]
  not: NoteSubscriptionFilter
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getNote(id: GraphbackObjectID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getComment(id: GraphbackObjectID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  syncNotes(lastSync: GraphbackTimestamp!, filter: NoteFilter, limit: Int): NoteDeltaList!
  syncComments(lastSync: GraphbackTimestamp!, filter: CommentFilter, limit: Int): CommentDeltaList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}