## NOTE: This schema was generated by Graphback and should not be changed manually

""" @model """
type Comment {
  id: ID!
  text: String
  description: String!
  title: String!

  """@manyToOne field: 'comments', key: 'noteCommentId'"""
  noteComment: Note
}

input CommentFilter {
  id: IDInput
  text: StringInput
  description: StringInput
  title: StringInput
  noteCommentId: IDInput
  and: [CommentFilter]
  or: [CommentFilter]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CreateCommentInput {
  id: ID
  text: String
  description: String!
  title: String!
  noteCommentId: ID
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
}

input MutateCommentInput {
  id: ID!
  text: String
  description: String
  title: String
  noteCommentId: ID
}

input MutateNoteInput {
  id: ID!
  title: String
  description: String
}

type Mutation {
  createNote(input: CreateNoteInput!): Note!
  updateNote(input: MutateNoteInput!): Note!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: MutateCommentInput!): Comment!
}

""" @model """
type Note {
  id: ID!
  title: String!
  description: String!

  """@oneToMany field: 'noteComment', key: 'noteCommentId'"""
  comments(filter: CommentFilter): [Comment]!
}

input NoteFilter {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter]
  or: [NoteFilter]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getNote(id: ID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}