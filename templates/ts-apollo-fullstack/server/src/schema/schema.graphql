## NOTE: This schema was generated by Graphback and should not be changed manually

""" @model """
type Comment {
  id: ID!
  text: String
  description: String

  """@manyToOne field: 'comments', key: 'noteId'"""
  note: Note
}

input CommentFilterInput {
  id: IDInput
  text: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: CommentFilterInput
  not: [CommentFilterInput]
}

type CommentResultList {
  items: [Comment]!
  nextCursor: String
}

input CreateCommentInput {
  id: ID
  text: String
  description: String
}

input CreateNoteInput {
  id: ID
  title: String!
  description: String
}

input DeleteCommentInput {
  id: ID!
}

input DeleteNoteInput {
  id: ID!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  createNote(input: CreateNoteInput!): Note!
  updateNote(input: UpdateNoteInput!): Note!
  deleteNote(input: DeleteNoteInput!): Note!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(input: DeleteCommentInput!): Comment!
}

""" @model """
type Note {
  id: ID!
  title: String!
  description: String

  """@oneToMany field: 'note', key: 'noteId'"""
  comments(filter: CommentFilterInput): [Comment]!
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: NoteFilterInput
  not: [NoteFilterInput]
}

type NoteResultList {
  items: [Note]!
  nextCursor: String
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

type Query {
  getNote(id: ID!): Note
  findNotes(filter: NoteFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): NoteResultList!
  getComment(id: ID!): Comment
  findComments(filter: CommentFilterInput, orderBy: OrderByInput, limit: Int, offset: Int): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(input: CreateNoteInput): Note!
  updatedNote(input: UpdateNoteInput): Note!
  deletedNote(input: DeleteNoteInput): Note!
  newComment(input: CreateCommentInput): Comment!
  updatedComment(input: UpdateCommentInput): Comment!
  deletedComment(input: DeleteCommentInput): Comment!
}

input UpdateCommentInput {
  id: ID!
  text: String
  description: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  description: String
}