## NOTE: This schema was generated by Graphback and should not be changed manually

""" @model """
type Comment {
  id: ID!
  text: String
  description: String

  """@manyToOne field: 'comments', key: 'noteId'"""
  note: Note
}

input CommentFilterInput {
  id: IDInput
  text: StringInput
  description: StringInput
  and: [CommentFilterInput]
  or: [CommentFilterInput]
  not: [CommentFilterInput]
}

input CommentFilterUniqueInput {
  id: ID!
}

input CommentInput {
  id: ID
  text: String
  description: String
}

type CommentListResult {
  items: [Comment]!
  nextCursor: String
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID]
  contains: ID
  startsWith: ID
  endsWith: ID
}

type Mutation {
  createNote(input: NoteInput!): Note!
  updateNote(input: NoteInput!): Note!
  deleteNote(input: NoteFilterUniqueInput!): Note!
  createComment(input: CommentInput!): Comment!
  updateComment(input: CommentInput!): Comment!
  deleteComment(input: CommentFilterUniqueInput!): Comment!
}

""" @model """
type Note {
  id: ID!
  title: String!
  description: String

  """@oneToMany field: 'note', key: 'noteId'"""
  comments(filter: CommentFilterInput): [Comment]!
}

input NoteFilterInput {
  id: IDInput
  title: StringInput
  description: StringInput
  and: [NoteFilterInput]
  or: [NoteFilterInput]
  not: [NoteFilterInput]
}

input NoteFilterUniqueInput {
  id: ID!
}

input NoteInput {
  id: ID
  title: String
  description: String
}

type NoteListResult {
  items: [Note]!
  nextCursor: String
}

type Query {
  getNote(filter: NoteFilterUniqueInput!): Note
  findNotes(filter: NoteFilterInput, limit: Int, offset: Int): NoteListResult!
  findAllNotes(filter: NoteFilterInput, limit: Int, offset: Int): [Note!]
  getComment(filter: CommentFilterUniqueInput!): Comment
  findComments(filter: CommentFilterInput, limit: Int, offset: Int): CommentListResult!
  findAllComments(filter: CommentFilterInput, limit: Int, offset: Int): [Comment!]
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(input: NoteInput): Note!
  updatedNote(input: NoteInput): Note!
  deletedNote(input: NoteFilterUniqueInput): Note!
  newComment(input: CommentInput): Comment!
  updatedComment(input: CommentInput): Comment!
  deletedComment(input: CommentFilterUniqueInput): Comment!
}